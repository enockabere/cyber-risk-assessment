generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  RESPONDENT
}

enum FieldType {
  TEXT
  DROPDOWN
  DATE
  NUMBER
}

enum RiskLevel {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum RiskRating {
  SUSTAINABLE
  MODERATE
  SEVERE
  CRITICAL
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String
  password  String
  role      UserRole  @default(RESPONDENT)
  status    String    @default("active")
  lastLogin DateTime?
  createdAt DateTime  @default(now())

  submissions         Submission[]
  backgroundResponses BackgroundResponse[]
}

model BackgroundField {
  id        String    @id @default(uuid())
  label     String
  fieldType FieldType
  options   String[] // For dropdown values

  questions Question[]
  responses BackgroundResponse[]
}

model BackgroundResponse {
  id        String   @id @default(uuid())
  userId    String
  fieldId   String
  value     String
  createdAt DateTime @default(now())

  user  User            @relation(fields: [userId], references: [id])
  field BackgroundField @relation(fields: [fieldId], references: [id])

  @@unique([userId, fieldId]) // each user can respond only once per field
}

model Question {
  id        String   @id @default(uuid())
  text      String
  position  Int      @default(0)
  createdAt DateTime @default(now())

  backgroundFieldId String?
  backgroundField   BackgroundField? @relation(fields: [backgroundFieldId], references: [id])

  options  RiskOption[]
  Answer   Answer[]
}


model RiskOption {
  id          String     @id @default(uuid())
  text        String
  probability RiskLevel?
  impact      RiskLevel?
  rating      RiskRating?

  controlDescription         String?
  residualProbability        RiskLevel?
  residualImpact             RiskLevel?
  residualRating             RiskRating?

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  Answer     Answer[]
}

model Submission {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  backgroundData Json

  userId String
  user   User   @relation(fields: [userId], references: [id])

  answers Answer[]
}

model Answer {
  id               String @id @default(uuid())
  questionId       String
  selectedOptionId String
  submissionId     String

  question       Question   @relation(fields: [questionId], references: [id])
  selectedOption RiskOption @relation(fields: [selectedOptionId], references: [id])
  submission     Submission @relation(fields: [submissionId], references: [id])
}
